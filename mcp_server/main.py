# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:21:19+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import (
    Cari7AmbientDoseGetResponse,
    Cari7EffectiveDoseGetResponse,
    ClimbTimes,
    CruisingAltitudes,
    CruisingTimes,
    ParmaAmbientDoseGetResponse,
    ParmaDifferentialIntensityGetResponse,
    ParmaEffectiveDoseGetResponse,
    Particle,
    Particle4,
    RouteAmbientDoseGetResponse,
    RouteEffectiveDoseGetResponse,
)

app = MCPProxy(
    contact={'x-twitter': 'amentumspace'},
    description='Our atmosphere protects us from a hostile space radiation environment comprising high energy particles of solar and intergalactic origin. Solar radiation is significant during unpredictable and short lived solar flares and coronal mass ejections (CMEs); however, galactic cosmic radiation (GCR) is omnipresent. The GCR intensity varies with latitude, longitude, and time due to effects of solar activity on the interplanetary magnetic field, as well as the Earth\'s magnetic field. Space radiation collides with gases in the atmosphere, leading to a complex shower of high energy radiation, the intensity and composition of which varies spatially and temporally. Excessive exposure to radiation can damage DNA and lead to long-term health effects such as an increased risk of cancer.  <br><br> Resulting radiation levels at commercial aircraft altitudes are greater than at sea level. Aircrew are classified as radiation workers in some countries; however, planning to limit their exposure, and monitoring, is generally lacking. Both real-time measurements and predictive models of radiation in the atmosphere are important to mitigate the radiation risk to crew. <br><br>\nWe host a RESTful API to models of cosmic ray induced ionising radiation in the atmosphere. \nThe CARI7 and PARMA endpoints use models developed by the US Federal Aviation Administration and the Japan Atomic Energy Agency to  calculate cosmic radiation doses at a point. \nThe Route Dose API calculates the same quantities along a great circle route between two airports using CARI7. <br><br>\nAPI requests must contain a key "API-Key" in the header (see code samples). Obtain a key from  <a href=\'https://developer.amentum.io\'>here</a>. <br><br> \nHelp us improve the quality of our web APIs by completing our 2 minute survey <a href="https://www.surveymonkey.com/r/CTDTRBN">here</a>.<br><br>\nAmentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br>\nCopyright <a href=\'https://amentum.space\'>Amentum Pty Ltd</a> 2022.\n',
    title='Aviation Radiation API',
    version='1.5.0',
    servers=[{'url': ''}],
)


@app.get(
    '/cari7/ambient_dose',
    description=""" The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields. 
Use this endpoint if you are comparing model predictions to measurements.
 """,
    tags=['dose_calculation'],
)
def app_api_cari7_endpoints__c_a_r_i7_ambient_dose(
    altitude: float,
    latitude: float = ...,
    longitude: float = ...,
    year: int = ...,
    month: int = ...,
    day: int = ...,
    utc: int = ...,
    particle: Particle = ...,
):
    """
    The ambient dose equivalent rate calculated for a single particle type, or accumulated over all particle types.

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cari7/effective_dose',
    description=""" Effective Dose is a radiation protection quantity defined by the International Commission on
 Radiological Protection (ICRP) and represents the stochastic health
 risk to the human body at low levels of radiation.
It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation.
Use this endpoint if you need to estimate radiation exposures of personnel.
 """,
    tags=['dose_calculation'],
)
def app_api_cari7_endpoints__c_a_r_i7_effective_dose(
    altitude: float,
    latitude: float = ...,
    longitude: float = ...,
    year: int = ...,
    month: int = ...,
    day: int = ...,
    utc: int = ...,
    particle: Particle = ...,
):
    """
    The effective dose rate calculated for a single particle type, or accumulated over all particle types.

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/parma/ambient_dose',
    description=""" The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields. 
Use this endpoint if you are comparing model predictions to measurements.
 """,
    tags=['dose_calculation'],
)
def app_api_parma_endpoints__p_a_r_m_a_ambient_dose(
    altitude: Optional[float] = None,
    atmospheric_depth: Optional[float] = None,
    latitude: float = ...,
    longitude: float = ...,
    year: int = ...,
    month: int = ...,
    day: int = ...,
    particle: Particle4 = ...,
):
    """
    The ambient dose equivalent rate calculated for a single particle type, or accumulated over all particle types.

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/parma/differential_intensity',
    description=""" The differential intensity of a particle is a directional quantity that describes the number of particles per unit area, per unit solid angle, per unit energy, and per unit time. The API leverages the functionality of PARMA to calculate differential intensity distributions with energies in units of MeV and Intensity in units of /cm2/sr/MeV/s.
 """,
    tags=['dose_calculation'],
)
def app_api_parma_endpoints__p_a_r_m_a_differential_intensity(
    altitude: Optional[float] = None,
    atmospheric_depth: Optional[float] = None,
    latitude: float = ...,
    longitude: float = ...,
    year: int = ...,
    month: int = ...,
    day: int = ...,
    particle: Particle4 = ...,
    angle: float = ...,
):
    """
    The energy differential intensity of a particle at a given zenith angle.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/parma/effective_dose',
    description=""" Effective dose is a radiation protection quantity defined by the International Commission on Radiological Protection (ICRP) and represents the stochastic health risk to the human body at low levels of radiation. It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation.
Use this endpoint if you need to estimate radiation exposures of personnel.
 """,
    tags=['dose_calculation'],
)
def app_api_parma_endpoints__p_a_r_m_a_effective_dose(
    altitude: Optional[float] = None,
    atmospheric_depth: Optional[float] = None,
    latitude: float = ...,
    longitude: float = ...,
    year: int = ...,
    month: int = ...,
    day: int = ...,
    particle: Particle4 = ...,
):
    """
    The effective dose rate calculated for a single particle type, or accumulated over all particle types.

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/route/ambient_dose',
    description=""" The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields.  <br> <br> Use this endpoint if you are comparing model predictions to measurements. <br> <br> This API can run in two modes: <br> <br> Either specify <br> <b>altitude</b>, <b>duration</b><br> for constant altitude calculations; <br> <br> Or specify <br> <b>initial_altitude</b>, <b>cruising_altitudes</b>, <b>climb_times</b>, <b>cruising_times</b>, <b>descent_time</b>, <b>final_altitude</b><br> to calculate dose accounting for a step climb. <br> <br> Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings.
 """,
    tags=['dose_calculation', 'flight_route_radiation_exposure'],
)
def app_api_icaro_endpoints__i_c_a_r_o_ambient_dose(
    origin: str,
    destination: str = ...,
    altitude: Optional[float] = None,
    duration: Optional[float] = None,
    initial_altitude: Optional[float] = None,
    cruising_altitudes: Optional[CruisingAltitudes] = None,
    climb_times: Optional[ClimbTimes] = None,
    cruising_times: Optional[CruisingTimes] = None,
    descent_time: Optional[float] = None,
    final_altitude: Optional[float] = None,
    year: int = ...,
    month: int = ...,
    day: int = ...,
):
    """
    Calculate the ambient equivalent dose along a great circle flight route.

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/route/effective_dose',
    description=""" Effective Dose is a radiation protection quantity defined by the International Commission on
 Radiological Protection (ICRP) and represents the stochastic health
 risk to the human body at low levels of radiation.
It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation. <br> <br> Use this endpoint if you need to estimate radiation exposures of personnel. <br> <br> This API can run in two modes: <br> <br> Either specify <br> <b>altitude</b>, <b>duration</b><br> for constant altitude calculations; <br> <br> Or specify <br> <b>initial_altitude</b>, <b>cruising_altitudes</b>, <b>climb_times</b>, <b>cruising_times</b>, <b>descent_time</b>, <b>final_altitude</b><br> to calculate dose accounting for a step climb. <br> <br> Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings.
 """,
    tags=['dose_calculation', 'flight_route_radiation_exposure'],
)
def app_api_icaro_endpoints__i_c_a_r_o_effective_dose(
    origin: str,
    destination: str = ...,
    altitude: Optional[float] = None,
    duration: Optional[float] = None,
    initial_altitude: Optional[float] = None,
    cruising_altitudes: Optional[CruisingAltitudes] = None,
    climb_times: Optional[ClimbTimes] = None,
    cruising_times: Optional[CruisingTimes] = None,
    descent_time: Optional[float] = None,
    final_altitude: Optional[float] = None,
    year: int = ...,
    month: int = ...,
    day: int = ...,
):
    """
    Calculate the total effective dose along a great circle flight route.

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
