# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:21:19+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class Particle(Enum):
    total = 'total'
    neutron = 'neutron'
    photon = 'photon'
    e_ = 'e-'
    e__1 = 'e+'
    mu_ = 'mu-'
    mu__1 = 'mu+'
    proton = 'proton'
    pi_ = 'pi-'
    pi__1 = 'pi+'
    deuteron = 'deuteron'
    triton = 'triton'
    helion = 'helion'
    alpha = 'alpha'
    Li = 'Li'
    Be = 'Be'
    B = 'B'
    C = 'C'
    N = 'N'
    O = 'O'
    F = 'F'
    Ne = 'Ne'
    Na = 'Na'
    Mg = 'Mg'
    Al = 'Al'
    Si = 'Si'
    P = 'P'
    S = 'S'
    Cl = 'Cl'
    Ar = 'Ar'
    K = 'K'
    Ca = 'Ca'
    Sc = 'Sc'
    Ti = 'Ti'
    V = 'V'
    Cr = 'Cr'
    Mn = 'Mn'
    Fe = 'Fe'


class DoseRate(BaseModel):
    units: Optional[str] = None
    value: Optional[float] = None


class Cari7AmbientDoseGetResponse(BaseModel):
    dose_rate: Optional[DoseRate] = Field(None, alias='dose rate')


class Cari7EffectiveDoseGetResponse(BaseModel):
    dose_rate: Optional[DoseRate] = Field(None, alias='dose rate')


class Particle4(Enum):
    total = 'total'
    e_ = 'e-'
    e__1 = 'e+'
    mu_ = 'mu+'
    mu__1 = 'mu-'
    gamma = 'gamma'
    neutron = 'neutron'
    proton = 'proton'
    alpha = 'alpha'


class ParmaAmbientDoseGetResponse(BaseModel):
    dose_rate: Optional[DoseRate] = Field(None, alias='dose rate')


class Energies(BaseModel):
    data: Optional[List[float]] = None
    units: Optional[str] = None


class Intensities(BaseModel):
    data: Optional[List[float]] = None
    units: Optional[str] = None


class ParmaDifferentialIntensityGetResponse(BaseModel):
    energies: Optional[Energies] = None
    intensities: Optional[Intensities] = None


class ParmaEffectiveDoseGetResponse(BaseModel):
    dose_rate: Optional[DoseRate] = Field(None, alias='dose rate')


class Dose(BaseModel):
    date: Optional[str] = None
    destination: Optional[str] = None
    origin: Optional[str] = None
    units: Optional[str] = None
    value: Optional[float] = None


class RouteAmbientDoseGetResponse(BaseModel):
    dose: Optional[Dose] = None


class CruisingAltitudes(RootModel[List[float]]):
    root: List[float] = Field(..., examples=[[10, 15]])


class ClimbTimes(RootModel[List[float]]):
    root: List[float] = Field(..., examples=[[0.1, 0.5]])


class CruisingTimes(RootModel[List[float]]):
    root: List[float] = Field(..., examples=[[1, 2]])


class RouteEffectiveDoseGetResponse(BaseModel):
    dose: Optional[Dose] = None
